<?xml version="1.0"?>
<OWASPZAPReport programName="ZAP" version="2.15.0" generated="Mon, 13 May 2024 23:46:05">
	
		<site name="http://127.0.0.1:8081" host="127.0.0.1" port="8081" ssl="false">
			<alerts>
				
					<alertitem>
						<pluginid>10202</pluginid>
						<alertRef>10202</alertRef>
						<alert>Absence of Anti-CSRF Tokens</alert>
						<name>Absence of Anti-CSRF Tokens</name>
						<riskcode>2</riskcode>
						<confidence>1</confidence>
						<riskdesc>Medium (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;No Anti-CSRF tokens were found in a HTML submission form.&lt;/p&gt;&lt;p&gt;A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CSRF attacks are effective in a number of situations, including:&lt;/p&gt;&lt;p&gt;    * The victim has an active session on the target site.&lt;/p&gt;&lt;p&gt;    * The victim is authenticated via HTTP auth on the target site.&lt;/p&gt;&lt;p&gt;    * The victim is on the same local network as the target site.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CSRF has primarily been used to perform an action against a target site using the victim&apos;s privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/login?error</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form action=&quot;/WebGoat/login&quot; method=&apos;POST&apos; style=&quot;width: 200px;&quot;&gt;</evidence>
									<otherinfo>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: &quot;exampleInputEmail1&quot; &quot;exampleInputPassword1&quot; ].</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/registration</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form class=&quot;form-horizontal&quot; action=&quot;/WebGoat/register.mvc&quot; method=&apos;POST&apos;&gt;</evidence>
									<otherinfo>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: &quot;agree&quot; &quot;matchingPassword&quot; &quot;password&quot; &quot;username&quot; ].</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/register.mvc</uri>
									<method>POST</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form class=&quot;form-horizontal&quot; action=&quot;/WebGoat/register.mvc&quot; method=&apos;POST&apos;&gt;</evidence>
									<otherinfo>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: &quot;agree&quot; &quot;matchingPassword&quot; &quot;password&quot; &quot;username&quot; ].</otherinfo>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Phase: Architecture and Design&lt;/p&gt;&lt;p&gt;Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.&lt;/p&gt;&lt;p&gt;For example, use anti-CSRF packages such as the OWASP CSRFGuard.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Implementation&lt;/p&gt;&lt;p&gt;Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Architecture and Design&lt;/p&gt;&lt;p&gt;Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).&lt;/p&gt;&lt;p&gt;Note that this can be bypassed using XSS.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.&lt;/p&gt;&lt;p&gt;Note that this can be bypassed using XSS.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Use the ESAPI Session Management control.&lt;/p&gt;&lt;p&gt;This control includes a component for CSRF.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Do not use the GET method for any request that triggers a state change.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Implementation&lt;/p&gt;&lt;p&gt;Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: &quot;exampleInputEmail1&quot; &quot;exampleInputPassword1&quot; ].&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;https://cwe.mitre.org/data/definitions/352.html&lt;/p&gt;</reference>
						<cweid>352</cweid>
						<wascid>9</wascid>
						<sourceid>15018</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10038</pluginid>
						<alertRef>10038-1</alertRef>
						<alert>Content Security Policy (CSP) Header Not Set</alert>
						<name>Content Security Policy (CSP) Header Not Set</name>
						<riskcode>2</riskcode>
						<confidence>3</confidence>
						<riskdesc>Medium (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page &#x2014; covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/login?error</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/registration</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/register.mvc</uri>
									<method>POST</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy&lt;/p&gt;&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;https://www.w3.org/TR/CSP/&lt;/p&gt;&lt;p&gt;https://w3c.github.io/webappsec-csp/&lt;/p&gt;&lt;p&gt;https://web.dev/articles/csp&lt;/p&gt;&lt;p&gt;https://caniuse.com/#feat=contentsecuritypolicy&lt;/p&gt;&lt;p&gt;https://content-security-policy.com/&lt;/p&gt;</reference>
						<cweid>693</cweid>
						<wascid>15</wascid>
						<sourceid>15018</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10020</pluginid>
						<alertRef>10020-1</alertRef>
						<alert>Missing Anti-clickjacking Header</alert>
						<name>Missing Anti-clickjacking Header</name>
						<riskcode>2</riskcode>
						<confidence>2</confidence>
						<riskdesc>Medium (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The response does not include either Content-Security-Policy with &apos;frame-ancestors&apos; directive or X-Frame-Options to protect against &apos;ClickJacking&apos; attacks.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/login?error</uri>
									<method>GET</method>
									<param>x-frame-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/registration</uri>
									<method>GET</method>
									<param>x-frame-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/register.mvc</uri>
									<method>POST</method>
									<param>x-frame-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.&lt;/p&gt;&lt;p&gt;If you expect the page to be framed only by pages on your server (e.g. it&apos;s part of a FRAMESET) then you&apos;ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy&apos;s &quot;frame-ancestors&quot; directive.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&lt;/p&gt;</reference>
						<cweid>1021</cweid>
						<wascid>15</wascid>
						<sourceid>15018</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>3</pluginid>
						<alertRef>3-2</alertRef>
						<alert>Session ID in URL Rewrite</alert>
						<name>Session ID in URL Rewrite</name>
						<riskcode>2</riskcode>
						<confidence>3</confidence>
						<riskdesc>Medium (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/login;jsessionid=63ORasotrDL514dpKQMt5nL1776f1upKm4AcEaRM</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>jsessionid=63ORasotrDL514dpKQMt5nL1776f1upKm4AcEaRM</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/login;jsessionid=dGTtUopAVDfYlr57W4Fdw1X7tVdZwCmmXRX_Q59C</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>jsessionid=dGTtUopAVDfYlr57W4Fdw1X7tVdZwCmmXRX</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/login;jsessionid=ooifgnWZJQxWq-QX_i879Y9F8j6uHQooZdHdKQEz</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>jsessionid=ooifgnWZJQxWq</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/login;jsessionid=slqRc2ufrAUF3L_pVwefCuksT45Dy1rgnYlb-U5j</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>jsessionid=slqRc2ufrAUF3L</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/login;jsessionid=v8teBgnCZnjQFfDIcSM6_Ee3YzJfoKS4SDiMKxpN</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>jsessionid=v8teBgnCZnjQFfDIcSM6</evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/login;jsessionid=Y6M9rLUlkZWp4c-9v6eiLVVwof9FdCNbIl1p5FgK</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>jsessionid=Y6M9rLUlkZWp4c</evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>6</count>
						<solution>&lt;p&gt;For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://seclists.org/webappsec/2002/q4/111&lt;/p&gt;</reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>14980</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10021</pluginid>
						<alertRef>10021</alertRef>
						<alert>X-Content-Type-Options Header Missing</alert>
						<name>X-Content-Type-Options Header Missing</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to &apos;nosniff&apos;. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/css/animate.css</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/css/font-awesome.min.css</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/css/img/favicon.ico</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/css/main.css</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/login?error</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/plugins/bootstrap/css/bootstrap.min.css</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/registration</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/register.mvc</uri>
									<method>POST</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
						</instances>
						<count>8</count>
						<solution>&lt;p&gt;Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to &apos;nosniff&apos; for all web pages.&lt;/p&gt;&lt;p&gt;If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.&lt;/p&gt;&lt;p&gt;At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)&lt;/p&gt;&lt;p&gt;https://owasp.org/www-community/Security_Headers&lt;/p&gt;</reference>
						<cweid>693</cweid>
						<wascid>15</wascid>
						<sourceid>15010</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10111</pluginid>
						<alertRef>10111</alertRef>
						<alert>Authentication Request Identified</alert>
						<name>Authentication Request Identified</name>
						<riskcode>0</riskcode>
						<confidence>3</confidence>
						<riskdesc>Informational (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;The given request has been identified as an authentication request. The &apos;Other Info&apos; field contains a set of key=value lines which identify any relevant fields. If the request is in a context which has an Authentication Method set to &quot;Auto-Detect&quot; then this rule will change the authentication to match the request identified.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/login</uri>
									<method>POST</method>
									<param>username</param>
									<attack></attack>
									<evidence>password</evidence>
									<otherinfo>userParam=username
userValue=ZAP
passwordParam=password
referer=http://127.0.0.1:8081/WebGoat/login</otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;This is an informational alert rather than a vulnerability and so there is nothing to fix.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;userParam=username&lt;/p&gt;&lt;p&gt;userValue=ZAP&lt;/p&gt;&lt;p&gt;passwordParam=password&lt;/p&gt;&lt;p&gt;referer=http://127.0.0.1:8081/WebGoat/login&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://www.zaproxy.org/docs/desktop/addons/authentication-helper/auth-req-id/&lt;/p&gt;</reference>
						<cweid>-1</cweid>
						<wascid>-1</wascid>
						<sourceid>15015</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10112</pluginid>
						<alertRef>10112</alertRef>
						<alert>Session Management Response Identified</alert>
						<name>Session Management Response Identified</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The given response has been identified as containing a session management token. The &apos;Other Info&apos; field contains a set of header tokens that can be used in the Header Based Session Management Method. If the request is in a context which has a Session Management Method set to &quot;Auto-Detect&quot; then this rule will change the session management to use the tokens identified.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>Y6M9rLUlkZWp4c-9v6eiLVVwof9FdCNbIl1p5FgK</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;This is an informational alert rather than a vulnerability and so there is nothing to fix.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;&lt;/p&gt;&lt;p&gt;cookie:JSESSIONID&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://www.zaproxy.org/docs/desktop/addons/authentication-helper/session-mgmt-id&lt;/p&gt;</reference>
						<cweid>-1</cweid>
						<wascid>-1</wascid>
						<sourceid>14991</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10031</pluginid>
						<alertRef>10031</alertRef>
						<alert>User Controllable HTML Element Attribute (Potential XSS)</alert>
						<name>User Controllable HTML Element Attribute (Potential XSS)</name>
						<riskcode>0</riskcode>
						<confidence>1</confidence>
						<riskdesc>Informational (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/register.mvc</uri>
									<method>POST</method>
									<param>agree</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

http://127.0.0.1:8081/WebGoat/register.mvc

appears to include user input in: 

a(n) [input] tag [name] attribute 

The user input found was:
agree=agree

The user-controlled value was:
agree</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/register.mvc</uri>
									<method>POST</method>
									<param>agree</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

http://127.0.0.1:8081/WebGoat/register.mvc

appears to include user input in: 

a(n) [input] tag [value] attribute 

The user input found was:
agree=agree

The user-controlled value was:
agree</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/register.mvc</uri>
									<method>POST</method>
									<param>matchingPassword</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

http://127.0.0.1:8081/WebGoat/register.mvc

appears to include user input in: 

a(n) [input] tag [value] attribute 

The user input found was:
matchingPassword=ZAP

The user-controlled value was:
zap</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/register.mvc</uri>
									<method>POST</method>
									<param>password</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

http://127.0.0.1:8081/WebGoat/register.mvc

appears to include user input in: 

a(n) [input] tag [value] attribute 

The user input found was:
password=ZAP

The user-controlled value was:
zap</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://127.0.0.1:8081/WebGoat/register.mvc</uri>
									<method>POST</method>
									<param>username</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:

http://127.0.0.1:8081/WebGoat/register.mvc

appears to include user input in: 

a(n) [input] tag [value] attribute 

The user input found was:
username=ZAP

The user-controlled value was:
zap</otherinfo>
								</instance>
							
						</instances>
						<count>5</count>
						<solution>&lt;p&gt;Validate all input and sanitize output it before writing to any HTML attributes.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;http://127.0.0.1:8081/WebGoat/register.mvc&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;appears to include user input in: &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;a(n) [input] tag [name] attribute &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The user input found was:&lt;/p&gt;&lt;p&gt;agree=agree&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The user-controlled value was:&lt;/p&gt;&lt;p&gt;agree&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html&lt;/p&gt;</reference>
						<cweid>20</cweid>
						<wascid>20</wascid>
						<sourceid>15020</sourceid>
					</alertitem>
				
			</alerts>
		</site>
	
</OWASPZAPReport>